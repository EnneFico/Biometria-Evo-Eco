
setwd("C:/BIOM")
#VETTORI
#esistono tre principali funzioni per generare vettori in R
#c, seq, rep

#c
v<-c(1,3,7)
v<-c(1:5)
v<-c(1:5,12:16,35:43)
s<-c("a","j","o")

#seq
w<-seq(4,10)
w<-seq(4,10,2)
w<-seq(0.3,0.5,0.001)

#rep
z=rep(1,100)
z=rep(c(7,9,13),3)
z=rep(c(7,9,13),1:3)

rep(1:4, 2)
rep(1:4, each = 2)       # not the same.
rep(1:4, c(2,2,2,2))     # same as second.
rep(1:4, c(2,1,2,1))

rep(1:4, each = 2, len = 4)    # first 4 only.
rep(1:4, each = 2, len = 10)   # 8 integers plus two recycled 1's.
rep(1:4, each = 2, times = 3)  # length 24, 3 complete replications

#vettori interni

letters
LETTERS
month.name

#funzione per unire oggetti

#paste
#output=vettore di caratteri

labels=paste(rep("A",10),1:10,sep="")
labels

#vettori + variabili fattoriali/"qualitative"
f=factor(c(rep("treatmentA",5),rep("treatmentB",3),"treatmentC"))
f

#funzione per riconoscere il tipo di vettore
#class

class(labels) # character
class(v) # integer
class(w) # numeric
class(f) # factor

#Esercizio 1. Costruire un vettore che contiene i numeri interi dispari tra 1 e 15, e ripetere la
#sequenza tre volte. Controllare la classe del vettore.

es1 <- rep(seq(1,15,2),3)

#Esercizio 2. Incollare elemento per elemento: a) le lettere maiuscole dell’alfabeto, b) i numeri interi
#da 1 a 26. Controllare la classe del vettore. 

es2 <- paste(LETTERS,1:26,sep="")
class(es2)

#VETTORI NUMERICI – STATISTICHE DI BASE

length(z) # numero degli elementi del vettore (notare che funziona con tutti i tipi di vettore)
min(z) # valore minimo del vettore
max(z) # valore massimo del vettore
sum(z) # somma di tutti i valori del vettore
mean(z) # media dei valori del vettore
median(z) # mediana dei valori del vettore
var(z) # varianza dei valori del vettore
sd(z) # deviazione standard dei valori del vettore (notare che sd è la radice quadrata di var) 

#quantili empirici
#(non confondere con quelli teorici)

#Un buon modo per avere (quasi) tutte le statistiche di base in un colpo solo è usare summary
summary(z)

#VETTORI NUMERICI – CAMPIONAMENTO CASUALE E SELEZIONE DI ELEMENTI

#La funzione sample estrae elementi a caso da un vettore (non necessariamente numerico):

r <- sample(1:10,6) # estrae 6 numeri a caso dalla sequenza di numeri interi da 1 a 10 
r=sample(1:10,6,replace=T) # come sopra, ma con re-immissione (cioè la possibilità di estrarre un singolo numero più di una volta) 
t=sample(c("T","C"),10,replace=T) #dove simuliamo 10 successivi lanci di moneta. 

#selezionare determinati elementi di un vettore

#parentesi quadre []

r[1] # estrae il primo elemento del vettore r
r[c(1,3)] # estrae il primo ed il terzo elemento di r

#le parentesi quadre possono essere utilizzate per selezionare elementi che verificano una certa condizione:

b=r>5 # genera un vettore booleano (TRUE/FALSE) che identifica quali elementi di r verificano (TRUE) o meno (FALSE) la condizione di essere maggiori di 5;
r1=r[b] # estraiamo in r1 soltanto gli elementi di r che verificano la condizione di cui sopra. 

#sintetizzati in una singola linea di comando:

r1=r[r>5] 

#costruire un filtro in R. 

#Esercizio3. Si generi un vettore che contiene tutti i numeri decimali da 0.001 a 1 con un incremento 
#di 0.001 (cioè 0.001, 0.002, …, 0.999, 1), dopodiché si estragga un secondo vettore contenentecento 
#elementi random del primo. Si calcolino quindi le statistiche di base (utilizzando le funzioni
#di cui sopra) sul secondo vettore. Per quel che riguarda i quantili empirici, si calcolino tutti i decili
#del vettore. Infine, si selezionino (dal secondo vettore) tutti gli elementi più piccoli di 0.3. 

e3a <- seq(0.001,1,0.001)
e3b <- sample(e3a,replace=T)

length(e3b) # numero degli elementi del vettore (notare che funziona con tutti i tipi di vettore)
min(e3b) # valore minimo del vettore
max(e3b) # valore massimo del vettore
sum(e3b) # somma di tutti i valori del vettore
mean(e3b) # media dei valori del vettore
median(e3b) # mediana dei valori del vettore
var(e3b) # varianza dei valori del vettore
sd(e3b) # deviazione standard dei valori del vettore (notare che sd è la radice quadrata di var) 

summary(e3b)

#due modi:
#decili

quantile(e3b,c(0.0,0.10,0.20,0.30,0.4,0.5,0.6,0.7,0.8,0.9,1))

quantile(e3b, prob = seq(0, 1, length = 11), type = 5) #The generic function quantile produces sample quantiles 
#corresponding to the given probabilities. The smallest observation corresponds to a probability of 0 and the 
#largest to a probability of 1.

e3c = e3b[e3b<0.3]


#MATRICI
#Esistono alcune funzioni per creare matrici in R, in particolare le funzioni matrix, rbind e cbind.

#linea di comando crea una matrice che contiene i numeri interi da 1 a 12 secondo 3 righe
#(e 4 colonne):

M=matrix(1:12,nrow=3,byrow=T) # l’opzione ‘byrow=T’ indica che la matrice sarà riempita
#seguendo le righe 

#Possiamo modificare i nomi di righe e colonne della matrice come segue:
rownames(M)=c("A","B","C")
colnames(M)=c("I","II","III","IV") 

#trasporre la matrice 
M2=t(M) 

#funzioni "esplorative"
dim(M) # restituisce il numero di righe e di colonne della matrice
class(M) # identifica la classe dell’oggetto M (‘matrix’) 

#rbind
#combina vettori di egual lunghezza secondo le righe

#cbind
#combina vettori di egual lunghezza secondo le colonne

a=1:7
b=8:14
abc=rbind(a,b) # combina i vettori a e b come righe di una matrice
abr=cbind(a,b) # combina i vettori a e b come colonne di una matrice 

#Si noti che i nomi delle righe (nel caso di rbind) o i nomi delle colonne (nel caso di cbind)
#corrisponderanno ai nomi dei vettori combinati. 

#Esercizio4
#Generare una matrice che contiene: 
#a) numeri dispari da 1 a 10; 
#b) numeri pari da 1 a 10;
#c) cinque ripetizioni del numero 0. La matrice dovrà avere 5 righe e dovrà essere riempita per
#colonne. Infine, modificare nomi di colonne e righe a piacimento. 

v1 <- c(0,3,5,7,0) 
v2 <- c(1,0,6,0,9)
v3 <- c(2,4,0,8,10)

es4 <- cbind(v1,v2,v3)

rownames(es4)=c("A","B","C","D","E")
colnames(es4)=c("I","II","III")

es4

#DATA FRAMES

#sono ideati per contenere/organizzare i dati sperimentali sui quali dovranno essere svolte le analisi statistica.
#deve consentire la coesistenza all’interno dello stesso oggetto

#esempio
var1=c(1:10)
var2=c(16:25)
var3=c(rep("a",2), rep("b",5), rep("c",3))
DF=data.frame(var3,var2,var1) 

DF

#funzioni per esplorare le caratteristiche ed il contenuto di un data frame
class(DF) # classe dell’oggetto
dim(DF) # numero di osservazioni e variabili
names(DF) # restituisce i nomi delle variabili (colonne)
head(DF) # mostra le prime righe del data frame (di default le prime 6)
tail(DF) # mostra le ultime righe del data frame (di default le ultime 6)
str(DF) # restituisce informazioni sulla struttura dei dati
summary(DF) # restituisce le statistiche di base per ogni variabile del data frame (si noti il diverso
#comportamento con variabili numeriche e variabili qualitative)

#Esercizio5. Generare un data frame con le seguenti variabili: 
#a) numeri interi da 1 a 50; 
#b) una variabile logica con 30 valori TRUE e 20 valori FALSE; 
#c) cinque ripetizioni delle ultime 10 lettere maiuscole in ordine alfabetico. 
#Esplorare il data frame utilizzando le funzioni presentate sopra.

va1 <- seq(1,50)
va2 <- c(rep("TRUE",30),rep("FALSE",20))
va3 <- rep(LETTERS[17:26],5)
es5 <- data.frame(va3,va2,va1)
es5

class(es5) # classe dell’oggetto
dim(es5) # numero di osservazioni e variabili
names(es5) # restituisce i nomi delle variabili (colonne)
head(es5) # mostra le prime righe del data frame (di default le prime 6)
tail(es5) # mostra le ultime righe del data frame (di default le ultime 6)
str(es5) # restituisce informazioni sulla struttura dei dati
summary(es5) # restituisce le statistiche di base per ogni variabile del data frame (si noti il diverso
#comportamento con variabili numeriche e variabili qualitative)

#DATA IMPORT/EXPORT 
#importare il dataset “alkfos.txt”:

#per ottenere il percorso della "present working directory":
 getwd()
#impostare un nuova wd:
 setwd("C:/BIOM")
 
 #importazione
#importare l’input file in un data frame che chiameremo “data”: 
 data=read.table("alkfos.txt",header=T) #L’argomento ‘header=T’ indica che la prima riga del dataset importato contiene l’‘header’
 #il nome del file deve essere comprensivo di estensione
#la funzione read.table ha molti altri argomenti utili:
 #separatore di testo "sep="
 #separatore decimale "dec="
 
#altra funzione per importare data frame:
 #read.csv read.csv2
 #1) il separatore di testo è “,” e il separatore decimale è “.” (setting internazionale, cui corrisponde la funzione read.csv)
 #2) il separatore di testo è “;” e il separatore decimale è “,” (setting Italiano, cui corrisponde la  funzione read.csv2).
 
#esplorare il data frame importato con le solite funzioni:
 class(data)
 str(data)
 summary(data)

 #esportazione
#write.table
 #Questa funzione si applica a data frames (o matrici) presenti nel workspace e restituisce un semplice 
 #file di testo che viene salvato nella solita directory di lavoro.
 
 #esportare il dataset già importato (alkfos.txt) col formato di un file .csv secondo il setting italiano:
 write.table(data,file="alkfos.csv",row.names=F,col.names=T,quote=F,sep=";",dec=",") 

 #Il primo argomento è il data frame che vogliamo esportare, 
 #il secondo (file) è il nome che intendiamo dare al dataset esportato (inclusivo di estensione);‘row.names=F’ significa che i nomi
 #delle righe non saranno inclusi nel file esportato, 
 #terzo argomento ‘col.names=T’ significa che i nomi delle colonne (cioè l’header) saranno inclusi; 
 #il quarto ‘quote=F’ viene inserito per evitare che R introduca apici (‘’) intorno ad ogni carattere/valore fattoriale (che è il comportamento default).
 #il quinto e il sesto ‘sep=";"’#‘dec=","’ introducono gli opportuni separatori di testo.   
 
#Esercizio6. Esportare lo stesso dataset in un file .csv con setting internazionale. 
 write.table(data,file="alkfosINT.csv",row.names=F,col.names=T,quote=F,sep=",",dec=".")


#DATA FRAMES – SELEZIONE E MODIFICA DI ELEMENTI
 
 #Trattandosi di oggetti bidimensionali, serviranno due indici. La sintassi è la seguente: 
 #il.mio.data.frame[numero/i di riga,numero/i di colonna] 
 
 data[1,1] # estrae il primo elemento della prima colonna di data
 data[3,2] # estrae il terzo elemento della seconda colonna di data
 data[1:3,2:5] # estrae i primi tre elementi delle colonne da 2 a 5
 data[1,] # estrae tutti gli elementi della prima riga
 data[,1] # estrae tutti gli elementi della prima colonna
 data[,c(1,3,5)] # estrae tutti gli elementi delle colonne 1, 3 e 5
 data[,-c(1,3,5)] # estrae tutti gli elementi di data ad eccezione delle colonne 1, 3 e 5 

 #è possibile selezionare una colonna di un data frame anche sulla base del  suo nome utilizzando il simbolo $ 
 
 data$c0 # seleziona la colonna (variabile) chiamata ‘c0’
#Gli stessi indici possono essere utilizzati per modificare elementi del data frame: 
 data[3,2]=100 # sostituisce l’elemento selezionato col valore 100
 data[,4]=data[,6] # sostituisce il contenuto della colonna 4 con quello della colonna 6
 data$c18=data$c24 # sostituisce il contenuto della colonna ‘c18’ con quello della colonna ‘c24’

 
 #Esercizio. Il file di Excel “rats.xls” contiene un piccolo dataset. Vogliamo:
  # 1) esportare (da Excel) il suo contenuto come semplice file di testo (.txt o .csv), 
  # 2) importare il file di testo in R utilizzando la funzione appropriata, 
  # 3) calcolare media, varianza e deviazione standard per tutte le variabili del dataset, 
  # 4) rimuovere la seconda colonna, 
  # 5) esportare il file modificato come file di testo (.csv se si è inizialmente importato un .txt, .txt se si è inizialmente importato un .csv)
 
 rats=read.csv("rats.csv",header=T)
rats
summary(rats)

mean(rats[,1]) # media dei valori del vettore
var(rats[,1]) # varianza dei valori del vettore
sd(rats[,1]) # deviazione standard

mean(rats[,2]) # media dei valori del vettore
var(rats[,2]) # varianza dei valori del vettore
sd(rats[,2]) # deviazione standard

mean(rats[,3]) # media dei valori del vettore
var(rats[,3]) # varianza dei valori del vettore
sd(rats[,3]) # deviazione standard

mean(rats[,4]) # media dei valori del vettore
var(rats[,4]) # varianza dei valori del vettore
sd(rats[,4]) # deviazione standard

rats_modified <- rats[,c(1,3,4)]
rats_modified

write.table(rats_modified,file="rats_modified.txt",row.names=F,col.names=T,quote=F,sep=",",dec=".")
prova=read.table("rats_modified.txt",sep=",",dec=".",header = T)
prova

#SALVARE LA SESSIONE 

#Al termine delle operazioni, il workspace si sarà popolato di una serie di oggetti. Per avere una lista degli stessi:
  ls()
#Se si desidera salvare una copia del workspace così com’è nel suo stato attuale, si può scrivere:
  save.image(file="1_basic.RData") 
#Il salvataggio del workspace non implica il salvataggio delle linee di comando lanciate durante la sessione. 
  #Per avere copia della ‘history’ dei comandi, si può scrivere:   
  savehistory("1_basic.txt")
