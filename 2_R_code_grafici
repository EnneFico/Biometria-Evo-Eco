#GRAFICI E FUNZIONI GRAFICHE

#generiamo un vettore che possa corrispondere al summary di una variabile qualitativa (o fattoriale)
#cioè al conto delle frequenze dei diversi stati della variabile qualitativa
 
 #L’esempio proposto corrisponde alle classi di passeggeri presenti sul Titanic al momento del naufragio:

titanclas=c(325,285,706,885)
names(titanclas)=c("1st","2nd","3rd","Crew")

   #e l’obiettivo è associare le quattro classi della variabile qualitativa (prima classe,
   #seconda classe, terza classe, equipaggio) alle rispettive frequenze. 

#VARIABILE QUALITATIVA

    #GRAFICO A TORTA
pie(titanclas) 

#È possibile modificare il plot aggiungendo specifici argomenti alla funzione, ad esempio: 
pie(titanclas,main="Passengers of Titanic",col=c("white","yellow","orange","darkred"))

#L’argomento ‘main’ introduce un titolo al plot
#l’argomento col permette di definire i colori desiderati per le quattro classi di dati.

#PALETTE DI COLORI
#Per un elenco di tutti i colori codificati in R:
  colors() 

  #esistono numerose funzioni per definire palette di colori specifici.
  pal1 = rainbow(4) #restituisce quattro colori equispaziati nello spazio RGB (Red Green Blue)
  pal2 = heat.colors(4) #restituisce quattro colori ‘caldi’ equispaziati nello spazio RGB.
  pal3 = grey(seq(0,1,0.33)) #la funzione ‘grey’ crea palette in bianco e nero.
  
  #Le palette così generate possono essere passate alle funzioni grafiche attraverso l’argomento ‘col’: 
  pie(titanclas,main="Passengers of Titanic",col=pal1) # plot con pal1
  pie(titanclas,main="Passengers of Titanic",col=pal2) # plot con pal2
  
  #esportare/salvare il grafico si utilizza la funzione dev.copy2pdf:
    dev.copy2pdf(file="pieplot_col.pdf")   
  
  pie(titanclas,main="Passengers of Titanic",col=pal3)  # plot con pal3
  dev.copy2pdf(file="pieplot_bw.pdf") # salva il contenuto del device in un file .pdf 

#pacchetto per altre palette di colori    
install.packages("RColorBrewer") # si noti che il nome del pacchetto va fra apici   
library(RColorBrewer) 
display.brewer.all()  

   pal4=brewer.pal(4,"Blues") #palette a sfumature di blu
pie(titanclas,main="Passengers of Titanic",col=pal4) # plot con pal4
dev.copy2pdf(file="pieplot_blues.pdf")


    #GRAFICO A BARRE

#Si tratta di una classica rappresentazione in cui lungo l’asse x si trovano le classi della
#variabile qualitativa e lungo l’asse y le corrispondenti frequenze ed ogni dato è rappresentato con una
#barra la cui lunghezza è proporzionale alla frequenza.

barplot(titanclas) # grafico a barre in versione default
barplot(titanclas,main="Passengers of Titanic",col=pal1) # aggiunge titolo ed usa la pal1
barplot(titanclas,main="Passengers of Titanic",col=c("white","yellow","orange","darkred")) # come sopra, ma con colori definiti ‘a mano’
barplot(titanclas,main="Passengers of Titanic",col=pal2,hor=T) # l’argomento ‘hor=T’ produce una versione orizzontale del barplot
dev.copy2pdf(file="barplot_horiz.pdf") # salva l’ultimo grafico in un file .pdf 

#DUE VARIABILI QUALITATIVE – GRAFICO A MOSAICO 
#Il cosiddetto ‘mosaic plot’ consente la rappresentazione di due variabili qualitative – le cui frequenze
#sono calcolate sullo stesso dataset – allo stesso tempo. 

#Un classico esempio è quello del dataset ‘caith’, che contiene le frequenze relative a colore degli occhi
#e colore dei capelli nella popolazione di Caithness, in scozia. Il dataset è incluso nella library MASS,
#uno dei pacchetti che fanno parte dell’installazione di base di R. Per recuperarlo:

library(MASS)
data(caith)
caith

#Per ottenere il grafico a mosaico: 
mosaicplot(caith,main="Colours of Hair and Eye for 5387 inhabitants of Caithness")
mosaicplot(caith,main="Colours of Hair and Eye for 5387 inhabitants of Caithness",shade=T) #e l’argomento ‘shade=T’ per introdurre la
#colorazione dei vari rettangoli sulla base dei residui, cioè sulla differenza fra valori osservati (valori presenti nella tabella) 
#e valori attesi (frequenze attese se i due caratteri considerati fossero completamente indipendenti)

#In questo modo è possibile evidenziare quali sono le associazioni fra le
#due variabili che si presentano con maggiore o minore frequenza rispetto all’ipotesi di indipendenza. 

   #Questo particolare grafico può essere considerato una rappresentazione del test del chi-quadro, che
   #vedremo in seguito. 

#UNA VARIABILE QUANTITATIVA – ISTOGRAMMA E BOXPLOT 

#Variabili quantitative sono quelle variabili che normalmente sono misurate e rappresentate tramite valori numerici.

  #Il dataset ‘crabs’, anch’esso contenuto nella library MASS, contiene alcune variabili
  #quantitative relative a diverse misure morfologiche in 200 individui di granchio:

data(crabs) 
head(crabs)

#Le variabili quantitative sono: 
  #frontal lobe size (FL), 
  #rear width (RW), 
  #carapace length (CL), 
  #carapacewidth (CW) 
  #body depth (BD),
  #tutte quante in millimetri. 
  #Esistono inoltre due variabili qualitative relative al colore degli individui 
  #– blu (B) o arancione (O) – e al sesso – maschio (M) o femmina (F) –
  #che individuano quattro gruppi di granchi composti da 50 individui ciascuno.

#selezionare subsets specifici di dati attraverso le variabili qualitative

caleor=crabs$CL[crabs$sp=="O"]

#Qui: a) selezioniamo la colonna CL con l’operatore $, quindi b) applichiamo un filtro sulla base del
#contenuto della colonna ‘sp’, cioè quella dove si specifica se i granchi sono blu o arancioni. Lo
#facciamo utilizzando gli indici fra parentesi quadre, dove introduciamo un’operazione logica, cioè
#chiediamo se i valori di quella variabile sono uguali ad “O” (arancione) o meno. Il doppio uguale (==)
#si usa ogni qual volta chiediamo ad R di verificare una condizione di uguaglianza! Il risultato, l’oggetto
#caleor, è un vettore di valori numerici.

#Rappresentiamo ora graficamente i valori di CL selezionati.

 #ISTOGRAMMA

#L’istogramma è un metodo di rappresentazione grafica di una variabile continua basato sulla sua
#distribuzione in diverse classi di grandezza. È costituito da rettangoli adiacenti le cui basi sono allineate
#su un asse orientato, corrispondente ai valori della variabile considerata. La larghezza dei rettangoli
#corrisponde all'ampiezza delle classi corrispondenti, mentre l'altezza è funzione della frequenza, cioè
#del numero di individui che cadono nelle diverse classi.

#Non va confuso col barplot, che è invece una
#rappresentazione per variabili qualitative!

#La funzione ‘hist’ consente di disegnare istogrammi su R: 

hist(caleor,main="Histogram of caleor") 

#A meno di diverse specificazioni, le classi di grandezza sono equispaziate e stabilite automaticamente dall’algoritmo

#La rappresentazione
#default prevede che l’altezza dei rettangoli sia scalata (asse y) sulla base delle frequenze assolute 
#(cioè sul numero di osservazioni che ricadono in ciascuna classe). 

#Densità di frequenza: La densità di frequenza corrisponde al rapporto fra la frequenza relativa di una classe (cioè frequenza
#assoluta diviso totale) e l’ampiezza della stessa classe.
# Se si desidera che la scala (asse y) si basi sulla densità di frequenza, si usa l’argomento ‘freq’:

hist(caleor,freq=F,main="Histogram of caleor")

#In questo modo, l’area di ogni rettangolo è esattamente uguale alla probabilità che ha un’osservazione di cadere in quella determinata classe.
#a) diventa necessario se le osservazioni sono raggruppate in classi di grandezza diversa, 
#b) corrisponde al concetto di ‘densità di probabilità’ che si ritrova nelle distribuzioni continue e che vedremo in seguito. 

#è anche possibile aggiungere al grafico una ‘curva di densità’:
#una curva che stima come si distribuirebbero i dati se il numero di classi fosse grandissimo

d=density(caleor)
lines(d)

dev.copy2pdf(file="hist_caleor1.pdf") #salvare il grafico ottenuto in un file .pdf: 

#Nel caso che l’ampiezza delle classi automaticamente stimata da R non fosse soddisfacente, è possibile
#modificarla utilizzando l’argomento ‘breaks’.

#vettore contenente gli intervalli desiderati

br=seq(10, 50,10) # in questo caso definiamo classi equispaziate di ampiezza 10 

#nuovo grafico
hist(caleor, breaks=br,freq=F,main="Histogram of caleor",col=grey(0.8)) 

   
   #BOXPLOT

# descrive variabili quantitative attraverso una rappresentazione grafica dei loro quartili.

# (box) i cui margini inferiore esuperiore corrispondono al primo e terzo quartile della variabile, 
# mentre la riga più o meno al centro della ‘scatola’ rappresenta la mediana (cioè il secondo quartile).

# Le linee a ‘T’ (whiskers) che si estendono verticalmente sotto e sopra la ‘scatola’ indicano 
# rispettivamente il valore minimo ed il valore massimo della variabile

# valori outlier (‘isolati’ rispetto al resto della distribuzione) 
# vengono rappresentati al di fuori dello spazio occupato da box e whiskers con singoli punti. 

boxplot(caleor,main="Boxplot")
boxplot(caleor,col=grey(0.8),main="carapace lengths",las=1) 

#‘las’ cambia l’orientamento delle etichette sulla scala del boxplot

rug(caleor,side=2)

#aggiunge una rappresentazione a ‘tappeto’ della distribuzione dei dati in corrispondenza della scala del 
#boxplot. (I possibili valori dell’argomento ‘side’ sono 1, 2, 3 e 4, che stanno per ‘sotto’, ‘sinistra’,‘sopra’ e ‘destra’).

#salvando il grafico
dev.copy2pdf(file="boxplot1.pdf")


#‘notch’,
#settato nella posizione TRUE, inserisce una ‘tacca’ sulla ‘scatola’ in corrispondenza della mediana.
#L’ampiezza della tacca è proporzionale alla varianza dei dati.
#É particolarmente utile quando si confrontano due (o più) distribuzioni della stessa variabile: 
#se le ‘tacche’ dei due boxplots non si sovrappongono, questa viene considerata ‘forte evidenza’ 
#che le due mediane differiscano. 

boxplot(caleor,notch=T,col=grey(0.8),main="carapace lengths",las = 1)
dev.copy2pdf(file="boxplot2.pdf") 

#Esercizio. 
#(A)Selezionare una variabile a piacere del dataset ‘crabs’ e filtrarla per gli individui di colore blu
#(B)Rappresentare la variabile con un istogramma ed aggiungere la curva di densità. 
#(C)Rappresentare la stessa variabile con un boxplot. 

crabs
#FL = Frontal lobe size

calblue = crabs$FL[crabs$sp=="B"]
summary(calblue)

hist(calblue, freq = F, main = "Frontal lobe size, Blue crabs")
lines(density(calblue))

boxplot(calblue,notch=T,col=grey(0.8),main="Frontal lobe size, Blue crabs",las = 1)


   #DUE VARIABILI QUANTITATIVE: SCATTERPLOT E RAPPRESENTAZIONE MULTI-FRAME 

#scatterplot o grafico a dispersione

#entra in gioco quando si devono rappresentare due variabili quantitative allo stesso tempo.

#Le due variabili sono semplicemente riportate sugli assi x e y di un piano cartesiano, e le
#varie osservazioni saranno rappresentate da punti all’interno del piano definito dalle due variabili.

#esempio pratico: recupero un altra variabile dal dataset

cawior=crabs$CW[crabs$sp=="O"] 

plot(caleor,cawior) #Il primo vettore (caleor) è associato all’asse x ed il secondo (cawior) è associato all’asse y.

#Le impostazioni specifiche di ‘plot’ possono essere modificate introducendo altri
#argomenti, ma è importante sapere che un buon numero di parametri grafici devono essere settati – se si
#desiderano impostazioni diverse dal default – prima che il grafico sia effettivamente prodotto. 

  #funzione par(mfrow()) per impostare graficamente gli spazi per i grafici

par(mfrow=c(1,3))

plot(caleor,cawior) 

plot(cawior~caleor,main="Length and Width of carapaces") #simbolo tilde ~ tra due variabili ci permette di rappresentare y=f(x)

plot(cawior~caleor,pch=20) #Il valore ‘pch=20’ corrisponde ad un puntino pieno #vedi tabella per le atre rappresentazioni dei punti

#salviamo

dev.copy2pdf(file="scatterplot_panel.pdf") 

#altra versione dello stesso grafico (questa volta senza multiframe) con altre funzioni grafiche ‘secondarie’

par(mfrow=c(1,1))

plot(cawior~caleor,main="Length and Width of the 100 carapaces", pch=20,xlab="length (in
mm)",ylab="width (in mm)") #‘xlab’ (inserisce un’etichetta o label sotto l’asse x) e 
                           #‘ylab’ (inserisce un’etichetta o label a sinistra dell’asse y). 

#e abline per aggiungere linee rette al plot: 

abline(h=mean(cawior),lty=2,col=grey(0.6)) #aggiunge una linea orizzontale (h) che passa per la media dei valori della variabile CW (cioè la variabile sull’asse y)
abline(v=mean(caleor),lty=2,col=grey(0.6)) #aggiunge una riga verticale (v) che passa per la media dei valori della variabile CL (cioè la variabile sull’asse x)
#L’argomento ‘lty’ (line type) definisce l’aspetto della linea, che in questo caso sarà tratteggiata; 
# l’argomento ‘col’ al solito ne specifica il colore (in questo caso una tonalità di grigio).

#Il punto d’intersezione delle due rette indica il baricentro (o centroide) dei dati, cioè il punto determinato dalle medie delle due variabili considerate
#Possiamo utilizzare la funzione ‘points’ per evidenziare questo punto: 

points(mean(caleor),mean(cawior),col="red",pch=20,cex=2) 

#esportiamo il plot: 
dev.copy2pdf(file="scatterplot_lines_points.pdf") 

#Esercizio. Scegliere due variabili numeriche a piacere (per i granchi blu) degli stessi dati e
#rappresentarle con un pannello multiframe contenente tre grafici di cui: il primo con i punti
#rappresentati da triangoli pieni di colore verde; il secondo con punti a piacere e rette (aspetto a piacere)
#passanti per i valori medi; il terzo senza rette ma con il baricentro dei dati evidenziato (aspetto a piacere). 

data(crabs)

cawblue <- crabs$RW[crabs$sp=="B"]
cawblue

par(mfrow=c(1,3))

plot(casblue,cawblue,pch=24,bg="green") 

plot(cawblue~casblue,pch=24,bg="orange", main="Size and Width of carapaces") 
abline(h=mean(cawblue),lty=2,col=grey(0.6))
abline(v=mean(casblue),lty=2,col=grey(0.6))

plot(cawblue~casblue,pch=18,col="purple")
points(mean(casblue),mean(cawblue),col="red",pch=20,cex=2)

dev.copy2pdf(file="Esercizio_scatterplot.pdf")



   #UNA VARIABILE QUALITATIVA E UNA VARIABILE QUANTITATIVA

#Il grafico boxplot può essere utilizzato per rappresentare dati quantitativi suddivisi in gruppi dai diversi
#valori di una variabile qualitativa. In pratica, si tratta di realizzare nello stesso grafico tanti boxplots
#quanti sono i raggruppamenti presenti nei dati. 

# consideriamo la variabile qualitativa ‘sex’

crabsex=crabs$sex[crabs$sp=="O"] 

#la funzione ‘par’ al fine di ottenere un pannello multiframe: 

par(mfrow=c(1,2)) 

#Un altro argomento di ‘par’ consente di modificare i margini del plot, cioè le dimensioni degli spazi
#vuoti (fatta eccezione per etichette e simili) che stanno intorno al plot: 

par(mar=c(3,2,2,2)) # I valori default sono c(5,4,4,2), quindi stiamo riducendo le dimensioni di tutti i margini  (ad eccezione del destro, che resta uguale). 

boxplot(caleor~crabsex) 

#L’interfaccia ‘formula’ consente di realizzare i diversi boxplot all’interno dello stesso grafico
#A sinistra della tilde si pone la variabile quantitativa, a destra quella qualitativa.
#: ‘variabile quantitativa in funzione della variabile qualitativa’.

#Il grafico risultante avrà i diversi valori della variabile qualitativa sull’asse x e quelli della variabile quantitativa sull’asse y. 

#Produciamo quindi una seconda versione dello stesso grafico con argomenti aggiuntivi: 

boxplot(caleor~crabsex,col=c("pink","lightblue"),notch = T)

#Esercizio. Generare una coppia di boxplots per i granchi blu (B) utilizzando la variabile qualitativa
#‘sex’ ed una variabile quantitativa a piacere. 

crabsexb=crabs$sex[crabs$sp=="B"] 

boxplot(casblue~crabsexb,col=c("pink","lightblue"),notch = T)

#esercizio bonus


boxplot(cawior~crabsex,main= "Orange Crabs",col=c("pink","lightblue"),notch = T)


boxplot(cawblue~crabsexb,main ="Blue Crabs",col=c("pink","lightblue"),notch = T)

dev.copy2pdf(file="Esercizio_orange_blue_boxplot.pdf")



    #TRE VARIABILI QUANTITATIVE ED UNA VARIABILE QUALITATIVA, PLOT 3D

#È possibile gestire situazioni relativamente complesse utilizzando varianti dello scatterplot con alcuni
#accorgimenti. Utilizziamo come esempio il dataset ‘tortues’ contenuto nella library ‘ade4’ (trattandosi
#di un pacchetto aggiuntivo, andrà eventualmente installato).

library(ade4)
data(tortues) 

tortues

#Per semplicità generiamo una copia della variabile qualitativa in un vettore: 

sex=tortues$sexe 

#Ora associamo ai due valori della variabile qualitativa diversi colori: 

sexcol=ifelse(sex=="M","blue","red") 

#Di nuovo per semplicità generiamo una copia delle variabili quantitative in un data frame: 

measures=tortues[,1:3] 

#A questo punto è possibile applicare la funzione ‘plot’: 

plot(measures,col=sexcol,pch=19)

#Se il primo argomento è un data frame contenente valori numerici, la funzione ‘plot’ risponderà
#restituendo un pannello di scatterplots fra tutte le possibili coppie di variabili. La variabile qualitativa
#‘sex’ viene introdotta tramite l’argomento ‘col’, per cui i punti nei diversi grafici saranno colorati in blu
#se corrispondenti a maschi, in rosso se corrispondenti a femmine. 

#Un’altra soluzione è offerta dalla library ‘rgl’ (3D Visualization Using OpenGL), che contiene diverse
#funzioni per la realizzazione di vari tipi di plots a tre dimensioni. (Naturalmente, essendo un pacchetto
#aggiuntivo va installato).

install.packages("rgl")
library(rgl)
plot3d(measures,type ="s",col=sexcol)

#La funzione ‘plot3d’ apre uno specifico strumento grafico (RGL device) e l’argomento ‘type ="s"’
#attiva lo scatterplot (s). L’argomento ‘col’ è del tutto analogo a quello delle ‘normali’ funzioni grafiche.
#Lo strumento grafico è interattivo e può essere orientato a piacere nella posizione desiderata. Per
#esportare una ‘istantanea’ del grafico:
  
  rgl.postscript(fmt="pdf",file="scatter3d.pdf")

#oppure

rgl.snapshot(file="scatter3d.png") 


#Esercizio. 
#Il dataset ‘iris’ – uno dei più noti datasets di esempio in ambito statistico (si veda ?iris per)
#– contiene quattro variabili numeriche relative alle dimensioni del fiore in 3 diverse specie di
#iris (per un totale di 150 osservazioni). Generare un pannello di scatterplots bidimensionali per tutte le
#possibili coppie di variabili numeriche con colori diversi per le diverse specie di iris. Generare uno
#scatterplot 3d per tre delle quattro variabili numeriche (a piacere) con colori diversi per le diverse
#specie di iris.

data("iris")

iriscol=iris[,5]

iriscol


 install.packages("plyr")
 library(plyr)
 
 revalue(iriscol, c("setosa" = "green")) -> iriscol
 revalue(iriscol, c("virginica" = "red")) -> iriscol
 revalue(iriscol, c("versicolor" = "blue")) -> iriscol
 iriscol

irsele = iris$Sepal.Length
irsewi = iris$Sepal.Width
irpele = iris$Petal.Length
irpewi = iris$Petal.Width

plot3d(irpele,irsele,irsewi,type ="s",col=iriscol)
